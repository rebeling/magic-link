magic_link.validate:
  path: "/magic-link/validate"
  defaults:
    _controller: '\Drupal\magic_link\Controller\MagicController::validate'
    _title: "Validate magic login email"
  requirements:
    # Open by design: client-side/HTMX email validation returns only generic,
    # non-sensitive text and triggers; no user data is exposed.
    _access: "TRUE"
  methods: [GET]

magic_link.request:
  path: "/magic-link/request"
  defaults:
    _controller: '\Drupal\magic_link\Controller\MagicController::request'
    _title: "Request magic login link"
  requirements:
    # Open by design: anonymous users must request a login link.
    # Protected by CSRF requirement and server-side validation/rate-limiting.
    _access: "TRUE"
    _csrf_request_header_token: "TRUE" # expect X-CSRF-Token header
  methods: [POST]

magic_link.ott_login:
  path: "/magic-link/ott/{uid}/{exp}/{nonce}/{sig}"
  defaults:
    _controller: '\Drupal\magic_link\Controller\MagicController::oneTimeLogin'
    _title: "Logging in"
  requirements:
    # Open by design: login occurs via signed, expiring one-time link.
    # Controller verifies signature, expiration, and single use.
    _access: "TRUE"
  methods: [GET]

magic_link.settings:
  path: "/admin/config/people/magic-link"
  defaults:
    _form: '\Drupal\magic_link\Form\MagicLinkSettingsForm'
    _title: "Magic Link settings"
  requirements:
    _permission: "administer magic link"

magic_link.persistent_login:
  path: "/magic-link/persistent/{uid}/{exp}/{nonce}/{sig}"
  defaults:
    _controller: '\Drupal\magic_link\Controller\MagicController::persistentLogin'
    _title: "Logging in"
  requirements:
    # Open by design: persistent login also requires signed, expiring link.
    # Controller performs full signature/expiry checks.
    _access: "TRUE"
  methods: [GET]
