<?php

/**
 * @file
 * Magic Link UX on the user login form and mail building.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\user\UserInterface;

/**
 * Implements hook_form_FORM_ID_alter() for the user login form.
 *
 * Adds Magic Link UI and HTMX behavior.
 *
 * @see user_login_form()
 */
function magic_link_form_user_login_form_alter(array &$form, FormStateInterface $form_state, $form_id): void {
  // Check if magic link is enabled.
  $config = \Drupal::config('magic_link.settings');
  $enabled = $config->get('enabled') ?? TRUE;

  if (!$enabled) {
    return;
  }

  // Attach HTMX from Drupal core.
  $form['#attached']['library'][] = 'core/htmx';

  $request_url = Url::fromRoute('magic_link.request');
  $csrf_token = \Drupal::csrfToken()->get($request_url->getInternalPath());

  // Place our widget after the core actions (username/password + submit).
  // Using a container with a themed child keeps it out of the form mechanics.
  $form['magic_link_widget'] = [
    '#type' => 'container',
    '#weight' => 100, // Push to the bottom of the login form.
    'content' => [
      '#theme' => 'magic_link_widget',
      '#csrf_token' => $csrf_token,
      '#request_url' => $request_url->toString(),
    ],
  ];
}


/**
 * Implements hook_theme().
 */
function magic_link_theme() {
  return [
    'magic_link_widget' => [
      'variables' => [
        'csrf_token' => NULL,
        'request_url' => NULL,
      ],
      'template' => 'magic-link-widget',
    ],
  ];
}


/**
 * Implements hook_mail().
 *
 * Builds subject and body for Magic Link emails.
 *
 * @see hook_mail()
 */
function magic_link_mail(string $key, array &$message, array $params): void {
  switch ($key) {
    case 'magic_link':
      /** @var \Drupal\user\UserInterface|null $account */
      $account = $params['account'] ?? NULL;
      $url = (string) ($params['url'] ?? '');
      if (!$account instanceof UserInterface) {
        return;
      }

      // phpcs:disable DrupalPractice.Objects.GlobalDrupal.GlobalDrupal
      /** @var \Drupal\magic_link\Service\MagicLinkMailService $mail_service */
      $mail_service = \Drupal::service('magic_link.mail');
      $config = \Drupal::config('magic_link.settings');
      // phpcs:enable

      // Get configured sender information.
      [$from_name, $from_email] = $mail_service->getSenderInfo();

      // Set sender.
      $message['from'] = "$from_name <$from_email>";

      // Get configured templates.
      $subject_template = $config->get('email.subject_template') ?: 'Your magic link for [site:name]';
      $body_template = $config->get('email.body_template') ?: $mail_service->getDefaultBodyTemplate();

      // Replace tokens.
      $message['subject'] = $mail_service->replaceTokens($subject_template, $account, $url);

      // Convert HTML body to plain text for mail manager.
      $body_html = $mail_service->replaceTokens($body_template, $account, $url);
      $body_text = $mail_service->htmlToPlainText($body_html);

      $message['body'] = explode("\n", $body_text);
      break;
  }
}
