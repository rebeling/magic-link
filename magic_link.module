<?php

/**
 * @file
 * Magic Link UX on the user login form and mail building.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\user\UserInterface;

/**
 * Implements hook_form_FORM_ID_alter() for the user login form.
 *
 * Adds Magic Link UI and HTMX behavior.
 *
 * @see user_login_form()
 */
function magic_link_form_user_login_form_alter(array &$form, FormStateInterface $form_state, $form_id): void {
  // Attach HTMX only on the login form to keep pages lean.
  $form['#attached']['library'][] = 'htmx/htmx';

  // Add a dedicated Magic Link container with email + action button.
  $form['magic_link'] = [
    '#type' => 'details',
    '#title' => t('Log in with Magic Link'),
    '#open' => TRUE,
    '#weight' => 100,
  ];

  // Email field used for magic link (separate from username).
  $form['magic_link']['magic_email'] = [
    '#type' => 'email',
    '#title' => t('Email address'),
    '#description' => t('Enter your email address and weâ€™ll send you a one-time login link.'),
    '#required' => FALSE,
    // Ensure the field posts with a flat name to simplify controller input.
    '#parents' => ['magic_email'],
    '#attributes' => [
      'id' => 'magic-link-email',
      // Validate via HTMX while typing.
      'hx-get' => Url::fromRoute('magic_link.validate')->toString(),
      'hx-trigger' => 'keyup changed delay:400ms',
      'hx-target' => '#magic-link-feedback',
      'hx-swap' => 'innerHTML',
      'autocomplete' => 'email',
      'inputmode' => 'email',
    ],
  ];

  // CSRF token for POST protection.
  // phpcs:disable DrupalPractice.Objects.GlobalDrupal.GlobalDrupal
  $csrf_token = \Drupal::service('csrf_token')->get('magic_link_request');
  // phpcs:enable
  $form['magic_link']['csrf_token'] = [
    '#type' => 'hidden',
    '#value' => $csrf_token,
    '#attributes' => ['id' => 'magic-link-csrf-token'],
  ];

  // Button to request the magic link using HTMX.
  $form['magic_link']['magic_submit'] = [
    '#type' => 'button',
    '#value' => t('Send Magic Link'),
    '#attributes' => [
      'hx-post' => Url::fromRoute('magic_link.request')->toString(),
      'hx-include' => '#magic-link-email, #magic-link-csrf-token',
      'hx-target' => '#magic-link-feedback',
      'hx-swap' => 'innerHTML',
      'hx-disabled-elt' => 'this',
      // Add CSRF token as header for additional security.
      'hx-headers' => json_encode(['X-CSRF-Token' => $csrf_token]),
    ],
  ];

  // Feedback area for HTMX responses (validation, errors, success).
  $form['magic_link']['feedback'] = [
    '#type' => 'container',
    '#attributes' => ['id' => 'magic-link-feedback'],
    'content' => ['#markup' => ''],
  ];
}

/**
 * Implements hook_mail().
 *
 * Builds subject and body for Magic Link emails.
 *
 * @see hook_mail()
 */
function magic_link_mail(string $key, array &$message, array $params): void {
  switch ($key) {
    case 'magic_link':
      /** @var \Drupal\user\UserInterface|null $account */
      $account = $params['account'] ?? NULL;
      $url = (string) ($params['url'] ?? '');
      if (!$account instanceof UserInterface) {
        return;
      }

      // phpcs:disable DrupalPractice.Objects.GlobalDrupal.GlobalDrupal
      /** @var \Drupal\magic_link\Service\MagicLinkMailService $mail_service */
      $mail_service = \Drupal::service('magic_link.mail');
      $config = \Drupal::config('magic_link.settings');
      // phpcs:enable

      // Get configured sender information.
      [$from_name, $from_email] = $mail_service->getSenderInfo();

      // Set sender.
      $message['from'] = "$from_name <$from_email>";

      // Get configured templates.
      $subject_template = $config->get('email.subject_template') ?: 'Your magic link for [site:name]';
      $body_template = $config->get('email.body_template') ?: $mail_service->getDefaultBodyTemplate();

      // Replace tokens.
      $message['subject'] = $mail_service->replaceTokens($subject_template, $account, $url);

      // Convert HTML body to plain text for mail manager.
      $body_html = $mail_service->replaceTokens($body_template, $account, $url);
      $body_text = $mail_service->htmlToPlainText($body_html);

      $message['body'] = explode("\n", $body_text);
      break;
  }
}
